from aiogram import Router, F, Bot
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from aiogram.filters import Command
from sup_inf import CHANNEL_ID

rt = Router()

class question(StatesGroup):
    question = State()

@rt.message(Command('start'), F.chat.type == 'private')
async def start_def(message: Message):
    await message.answer(text=f'ü§ñ –≠—Ç–æ –±–æ—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n'
                              f'–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Éüòä')


@rt.message(Command('answer'), F.chat.type == 'supergroup')
async def answer_def(message: Message, bot: Bot):
    if message.text == '/answer':
        pass
    else:
        data = (message.text).split(maxsplit=2)
        chat_id = data[1]
        text = data[2]
        await bot.send_message(chat_id=int(chat_id), text="‚úâÔ∏è –û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n"
                                                          f"<blockquote>{text}</blockquote>", parse_mode='html')
        await message.answer(text='‚úâÔ∏è –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')

@rt.message(F.chat.type == 'private')
async def question_def(message: Message, bot: Bot):
    await bot.forward_message(chat_id=CHANNEL_ID, from_chat_id=message.chat.id, message_id=message.message_id)
    text = (f'–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n'
            f' @{message.chat.username}\n\n'
            f'<code>/answer {message.chat.id} –í–∞—à –æ—Ç–≤–µ—Ç</code>')
    await bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode="HTML")
    await message.answer(text='‚úâÔ∏è –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
